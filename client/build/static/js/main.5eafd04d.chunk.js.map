{"version":3,"sources":["components/Window.js","components/Fields.js","App.js","serviceWorker.js","index.js"],"names":["Window","className","style","background","type","value","readOnly","textAlign","href","layout","labelCol","span","wrapperCol","tailLayout","Fields","props","onFinish","setState","loading","state","email","url","key","idIndex","indexOf","length","schedulerId","substring","axios","get","then","res","console","log","data","success","Message","errorMsg","message","error","catch","marginTop","name","initialValues","remember","this","Item","label","rules","required","placeholder","onChange","e","target","pattern","suffix","title","margin","InfoCircleOutlined","color","htmlType","Component","Header","Layout","Content","Footer","App","fontSize","padding","BellTwoTone","width","position","bottom","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5eafd04d.chunk.js","sourcesContent":["import React from 'react';\nimport './Window.css';\n\nfunction Window() {\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"column left\">\n          <span className=\"dot\" style={{ background: '#ED594A' }}></span>\n          <span className=\"dot\" style={{ background: '#FDD800' }}></span>\n          <span className=\"dot\" style={{ background: '#5AC05A' }}></span>\n        </div>\n        <div className=\"column middle\">\n          <input\n            className=\"domain\"\n            type=\"text\"\n            value=\"https://www.gmail.com\"\n            readOnly\n          />\n        </div>\n      </div>\n\n      <div className=\"content\" style={{ textAlign: 'center' }}>\n        <h3>Your next class INFO 2950 will start in 10 minutes at 1:25 PM</h3>\n        <p>\n          Zoom Link:\n          <a href=\"https://cornell.zoom.us/j/710144471?pwd=YjlNQVlJbURoeG\">\n            {' '}\n            https://cornell.zoom.us/j/710144471?pwd=YjlNQVlJbURoeG\n          </a>\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default Window;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport { Form, Input, Button, Tooltip, message as Message } from 'antd';\nimport { InfoCircleOutlined } from '@ant-design/icons';\n\nimport './Fields.css';\n\nconst layout = {\n  labelCol: { span: 6 },\n  wrapperCol: { span: 14 },\n};\nconst tailLayout = {\n  wrapperCol: { span: 0 },\n};\n\nexport class Fields extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      email: '',\n      url: '',\n      loading: false,\n    };\n  }\n\n  onFinish = () => {\n    // Set state for loading for button spinner\n    this.setState({ loading: true });\n\n    const { email, url } = this.state;\n    const key = '/shared/schedule/';\n\n    const keyIndex = url.indexOf(key);\n    const idIndex = keyIndex + key.length;\n\n    const schedulerId = url.substring(idIndex);\n\n    // Retrieve schedule info from API\n    axios\n      .get(`/api/schedule?email=${email}&id=${schedulerId}`)\n      .then((res) => {\n        console.log(res);\n        this.setState({ loading: false });\n        if (res.data.success) {\n          Message.success(`Successfully signed up with ${this.state.email}`);\n          console.log(res.data.data);\n        } else {\n          const errorMsg = (res && res.data.message) ? res.data.message : 'Enable to sign up at the moment. Please try again later'\n          Message.error(errorMsg);\n        }\n      })\n      .catch(() => {\n        this.setState({ loading: false });\n        Message.error(\n          'Enable to sign up at the moment. Please try again later'\n        );\n      });\n  };\n\n  render() {\n    return (\n      <Form\n        {...layout}\n        style={{ marginTop: '24px' }}\n        name=\"basic\"\n        initialValues={{ remember: true }}\n        onFinish={this.onFinish}\n      >\n        <Form.Item\n          label=\"Email\"\n          name=\"email\"\n          style={{ textAlign: 'left' }}\n          rules={[\n            { required: true, message: 'Email field cannot be empty' },\n            { type: 'email', message: 'Please enter a valid email' },\n          ]}\n        >\n          <Input\n            placeholder=\"hyw2@cornell.edu\"\n            onChange={(e) => this.setState({ email: e.target.value })}\n          />\n        </Form.Item>\n        <Form.Item\n          label=\"Schedule URL\"\n          name=\"url\"\n          style={{ textAlign: 'left' }}\n          rules={[\n            { required: true, message: 'URL field cannot be empty' },\n            {\n              pattern: /(https?:\\/\\/)?(www\\.)?classes\\.cornell\\.edu\\/shared\\/schedule\\/(sp|su|fa|wi)[1-2][0-9]\\/.......+/gi,\n              message: 'Please enter a valid shared schedule URL',\n            },\n          ]}\n        >\n          <Input\n            placeholder=\"https://classes.cornell.edu/shared/schedule/SP20/92eac951cf5b329be2522a9829421833\"\n            onChange={(e) => this.setState({ url: e.target.value })}\n            suffix={\n              <Tooltip\n                title={\n                  <p style={{ margin: '0' }}>\n                    Visit{' '}\n                    <a\n                      href=\"https://classes.cornell.edu/scheduler/roster/SP20\"\n                      target=\"_blank\"\n                    >\n                      Scheduler\n                    </a>{' '}\n                    and click 'Share'\n                  </p>\n                }\n              >\n                <InfoCircleOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n              </Tooltip>\n            }\n          />\n        </Form.Item>\n        <Form.Item {...tailLayout}>\n          <Button type=\"primary\" htmlType=\"submit\" loading={this.state.loading}>\n            {this.state.loading ? 'Loading' : 'Submit'}\n          </Button>\n        </Form.Item>\n      </Form>\n    );\n  }\n}\n\nexport default Fields;\n","import React from 'react';\nimport { Layout, Divider } from 'antd';\nimport { BellTwoTone } from '@ant-design/icons';\n\nimport Window from './components/Window';\nimport Fields from './components/Fields';\n\nimport './App.css';\n\nconst { Header, Content, Footer } = Layout;\n\nfunction App() {\n  return (\n    <div>\n      <Layout className=\"layout\">\n        <Header style={{ color: '#FFF', fontSize: '16px' }}>Cornell Notifs</Header>\n        <Content>\n          <div\n            className=\"site-layout-content\"\n            style={{ padding: '25px 50px 85px 50px' }}\n          >\n            <h1>\n              <BellTwoTone /> Receive email reminders with Zoom invites to your\n              classes\n            </h1>\n            {/* Add Product Info */}\n            <Window />\n            <Divider>Sign Up</Divider>\n            <Fields />\n          </div>\n        </Content>\n      </Layout>\n      <Footer\n        style={{\n          textAlign: 'center',\n          width: '100%',\n          position: 'fixed',\n          bottom: '0',\n        }}\n      >\n        Built with ❤️ by Ansh Godha & Han Wang wishing everyone well in these uncertain times\n      </Footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Import Ant Design CSS\nimport 'antd/dist/antd.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}